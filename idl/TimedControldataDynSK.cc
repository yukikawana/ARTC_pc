// This file is generated by omniidl (C++ backend) - omniORB_4_1. Do not edit.

#include "TimedControldata.hh"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_1_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static CORBA::PR_structMember _0RL_structmember_RTC_mTime[] = {
  {"sec", CORBA::TypeCode::PR_ulong_tc()},
  {"nsec", CORBA::TypeCode::PR_ulong_tc()}
};

#ifdef _0RL_tc_RTC_mTime
#  undef _0RL_tc_RTC_mTime
#endif
static CORBA::TypeCode_ptr _0RL_tc_RTC_mTime = CORBA::TypeCode::PR_struct_tc("IDL:RTC/Time:1.0", "Time", _0RL_structmember_RTC_mTime, 2, &_0RL_tcTrack);

static CORBA::PR_structMember _0RL_structmember_naistrobotics_mTimedControldata[] = {
  {"tm", _0RL_tc_RTC_mTime},
  {"yaw", CORBA::TypeCode::PR_double_tc()},
  {"vx", CORBA::TypeCode::PR_double_tc()},
  {"vy", CORBA::TypeCode::PR_double_tc()},
  {"vz", CORBA::TypeCode::PR_double_tc()},
  {"onground", CORBA::TypeCode::PR_boolean_tc()}
};

#ifdef _0RL_tc_naistrobotics_mTimedControldata
#  undef _0RL_tc_naistrobotics_mTimedControldata
#endif
static CORBA::TypeCode_ptr _0RL_tc_naistrobotics_mTimedControldata = CORBA::TypeCode::PR_struct_tc("IDL:naistrobotics/TimedControldata:1.0", "TimedControldata", _0RL_structmember_naistrobotics_mTimedControldata, 6, &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace naistrobotics { 
  const ::CORBA::TypeCode_ptr _tc_TimedControldata = _0RL_tc_naistrobotics_mTimedControldata;
} 
#else
const ::CORBA::TypeCode_ptr naistrobotics::_tc_TimedControldata = _0RL_tc_naistrobotics_mTimedControldata;
#endif


static void _0RL_naistrobotics_mTimedControldata_marshal_fn(cdrStream& _s, void* _v)
{
  naistrobotics::TimedControldata* _p = (naistrobotics::TimedControldata*)_v;
  *_p >>= _s;
}
static void _0RL_naistrobotics_mTimedControldata_unmarshal_fn(cdrStream& _s, void*& _v)
{
  naistrobotics::TimedControldata* _p = new naistrobotics::TimedControldata;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_naistrobotics_mTimedControldata_destructor_fn(void* _v)
{
  naistrobotics::TimedControldata* _p = (naistrobotics::TimedControldata*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const naistrobotics::TimedControldata& _s)
{
  naistrobotics::TimedControldata* _p = new naistrobotics::TimedControldata(_s);
  _a.PR_insert(_0RL_tc_naistrobotics_mTimedControldata,
               _0RL_naistrobotics_mTimedControldata_marshal_fn,
               _0RL_naistrobotics_mTimedControldata_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, naistrobotics::TimedControldata* _sp)
{
  _a.PR_insert(_0RL_tc_naistrobotics_mTimedControldata,
               _0RL_naistrobotics_mTimedControldata_marshal_fn,
               _0RL_naistrobotics_mTimedControldata_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, naistrobotics::TimedControldata*& _sp)
{
  return _a >>= (const naistrobotics::TimedControldata*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const naistrobotics::TimedControldata*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_naistrobotics_mTimedControldata,
                    _0RL_naistrobotics_mTimedControldata_unmarshal_fn,
                    _0RL_naistrobotics_mTimedControldata_marshal_fn,
                    _0RL_naistrobotics_mTimedControldata_destructor_fn,
                    _v)) {
    _sp = (const naistrobotics::TimedControldata*)_v;
    return 1;
  }
  return 0;
}

